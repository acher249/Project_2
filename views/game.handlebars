<!DOCTYPE html>
<html lang="en">
	<head>
		<!-- turn this into a handelbars file -->
		<!-- Get this to render at a route -->
		<title>three.js - pointerlock controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			html, body {
				width: 100%;
				height: 100%;
			}
			body {
				background-color: #ffffff;
				margin: 0;
				overflow: hidden;
				font-family: arial;
			}
			#blocker {
				position: absolute;
				width: 100%;
				height: 100%;
				background-color: rgba(0,0,0,0.5);
			}
			#instructions {
				width: 100%;
				height: 100%;
				display: -webkit-box;
				display: -moz-box;
				display: box;
				-webkit-box-orient: horizontal;
				-moz-box-orient: horizontal;
				box-orient: horizontal;
				-webkit-box-pack: center;
				-moz-box-pack: center;
				box-pack: center;
				-webkit-box-align: center;
				-moz-box-align: center;
				box-align: center;
				color: #ffffff;
				text-align: center;
				cursor: pointer;
			}

			.backButton {
				position: absolute;
				display: block;
				z-index: 99;
				left: 2%;
				top: 2%;
			}
		</style>
	</head>
	<body>
		{{!-- new syntax --}}
		<script src="threeJs/three.min.js"></script>
		<script src="threeJs/PointerLockControls.js"></script>

		<script src="threeJs/inflate.min.js"></script>
		<script src="threeJs/FBXLoader.js"></script>

		<script src="threeJs/WebGL.js"></script>
		<script src="threeJs/stats.min.js"></script>

		<div id="blocker">

			<div id="instructions">
				{{!-- <form action="/">
					<input type="submit" value="Go to Google" />
				</form> --}}
				<button class="backButton" ><a href="/">Back To Dance Party Survey!!</a></button>
				<span style="font-size:40px">Click to play</span>
				<br />
				(W, A, S, D = Move, SPACE = Jump, MOUSE = Look around)
			</div>

		</div>

		<script>
			if ( WEBGL.isWebGLAvailable() === false ) {
				document.body.appendChild( WEBGL.getWebGLErrorMessage() );
			}

			var container, stats, controls;
			var clock = new THREE.Clock();
			var mixers = [];
			var mixers2 = [];


			var camera, scene, renderer, controls;
			var objects = [];
			var raycaster;
			var moveForward = false;
			var moveBackward = false;
			var moveLeft = false;
			var moveRight = false;
			var canJump = false;
			var prevTime = performance.now();
			var velocity = new THREE.Vector3();
			var direction = new THREE.Vector3();
			var vertex = new THREE.Vector3();
			var color = new THREE.Color();


			// initialization
			init();
			LoadDancerOne();
			LoadDancerTwo();
			animateDancerOne();
			animateDancerTwo();
			animate();
			
			
			function LoadDancerOne() {
				
				// model
				var loader = new THREE.FBXLoader();
				loader.load( './threeJs/BboyUprock.fbx', function ( object2 ) {
					object2.mixer = new THREE.AnimationMixer( object2 );
					mixers.push( object2.mixer );
					var action2 = object2.mixer.clipAction( object2.animations[ 0 ] );
					action2.play();
					object2.traverse( function ( child ) {
						if ( child.isMesh ) {
							child.castShadow = true;
							child.receiveShadow = true;
						}
					} );
					scene.add( object2 );
					object2.translateZ( 0 );//change position
				} );
			}

			function LoadDancerTwo() {
				
				// model
				var loader = new THREE.FBXLoader();
				loader.load( './threeJs/HipHopDancing.fbx', function ( object2 ) {
					object2.mixer = new THREE.AnimationMixer( object2 );
					mixers2.push( object2.mixer );
					var action2 = object2.mixer.clipAction( object2.animations[ 0 ] );
					action2.play();
					object2.traverse( function ( child ) {
						if ( child.isMesh ) {
							child.castShadow = true;
							child.receiveShadow = true;
						}
					} );
					scene.add( object2 );
					object2.translateZ( 100 );//change position
				} );
			}

			function animateDancerOne() {
				requestAnimationFrame( animateDancerOne );
				if ( mixers.length > 0 ) {
					for ( var i = 0; i < mixers.length; i ++ ) {
						mixers[ i ].update( clock.getDelta());
					}
				}
				renderer.render( scene, camera );
			}

			function animateDancerTwo() {
				requestAnimationFrame( animateDancerTwo );
				if ( mixers2.length > 0 ) {
					for ( var i = 0; i < mixers2.length; i ++ ) {
						mixers2[ i ].update( clock.getDelta()*10);
					}
				}
				renderer.render( scene, camera );
			}


			function init() {
				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1000 );
				scene = new THREE.Scene();
				scene.background = new THREE.Color( 0xffffff );
				scene.fog = new THREE.Fog( 0xffffff, 0, 750 );
				var light = new THREE.HemisphereLight( 0xeeeeff, 0x777788, 0.75 );
				light.position.set( 0.5, 1, 0.75 );
				scene.add( light );
				controls = new THREE.PointerLockControls( camera );
				var blocker = document.getElementById( 'blocker' );
				var instructions = document.getElementById( 'instructions' );
				instructions.addEventListener( 'click', function ( event ) {
					controls.lock();
				}, false );
				controls.addEventListener( 'lock', function() {
					instructions.style.display = 'none';
					blocker.style.display = 'none';
				} );
				controls.addEventListener( 'unlock', function() {
					blocker.style.display = 'block';
					instructions.style.display = '';
				} );
				scene.add( controls.getObject() );
				var onKeyDown = function ( event ) {
					switch ( event.keyCode ) {
						case 38: // up
						case 87: // w
							moveForward = true;
							break;
						case 37: // left
						case 65: // a
							moveLeft = true; break;
						case 40: // down
						case 83: // s
							moveBackward = true;
							break;
						case 39: // right
						case 68: // d
							moveRight = true;
							break;
						case 32: // space
							if ( canJump === true ) velocity.y += 350;
							canJump = false;
							break;
					}
				};
				var onKeyUp = function ( event ) {
					switch( event.keyCode ) {
						case 38: // up
						case 87: // w
							moveForward = false;
							break;
						case 37: // left
						case 65: // a
							moveLeft = false;
							break;
						case 40: // down
						case 83: // s
							moveBackward = false;
							break;
						case 39: // right
						case 68: // d
							moveRight = false;
							break;
					}
				};
				document.addEventListener( 'keydown', onKeyDown, false );
				document.addEventListener( 'keyup', onKeyUp, false );
				raycaster = new THREE.Raycaster( new THREE.Vector3(), new THREE.Vector3( 0, - 1, 0 ), 0, 10 );
				// floor
				var floorGeometry = new THREE.PlaneBufferGeometry( 2000, 2000, 100, 100 );
				floorGeometry.rotateX( - Math.PI / 2 );
				// vertex displacement
				var position = floorGeometry.attributes.position;
				for ( var i = 0, l = position.count; i < l; i ++ ) {
					vertex.fromBufferAttribute( position, i );
					vertex.x += Math.random() * 20 - 10;
					vertex.y += Math.random() * 2;
					vertex.z += Math.random() * 20 - 10;
					position.setXYZ( i, vertex.x, vertex.y, vertex.z );
				}
				floorGeometry = floorGeometry.toNonIndexed(); // ensure each face has unique vertices
				position = floorGeometry.attributes.position;
				var colors = [];
				for ( var i = 0, l = position.count; i < l; i ++ ) {
					color.setHSL( Math.random() * 0.3 + 0.5, 0.75, Math.random() * 0.25 + 0.75 );
					colors.push( color.r, color.g, color.b );
				}
				floorGeometry.addAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );
				var floorMaterial = new THREE.MeshBasicMaterial( { vertexColors: THREE.VertexColors } );
				var floor = new THREE.Mesh( floorGeometry, floorMaterial );
				scene.add( floor );
				// objects
				var boxGeometry = new THREE.BoxBufferGeometry( 20, 20, 20 );
				boxGeometry = boxGeometry.toNonIndexed(); // ensure each face has unique vertices
				position = boxGeometry.attributes.position;
				colors = [];
				for ( var i = 0, l = position.count; i < l; i ++ ) {
					color.setHSL( Math.random() * 0.3 + 0.5, 0.75, Math.random() * 0.25 + 0.75 );
					colors.push( color.r, color.g, color.b );
				}
				boxGeometry.addAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );
				for ( var i = 0; i < 500; i ++ ) {
					var boxMaterial = new THREE.MeshPhongMaterial( { specular: 0xffffff, flatShading: true, vertexColors: THREE.VertexColors } );
					boxMaterial.color.setHSL( Math.random() * 0.2 + 0.5, 0.75, Math.random() * 0.25 + 0.75 );
					var box = new THREE.Mesh( boxGeometry, boxMaterial );
					box.position.x = Math.floor( Math.random() * 20 - 10 ) * 20;
					box.position.y = Math.floor( Math.random() * 20 ) * 20 + 10;
					box.position.z = Math.floor( Math.random() * 20 - 10 ) * 20;
					scene.add( box );
					objects.push( box );
				}
				//
				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );
				//
				window.addEventListener( 'resize', onWindowResize, false );
			}


			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}


			function animate() {
				requestAnimationFrame( animate );
				if ( controls.isLocked === true ) {
					raycaster.ray.origin.copy( controls.getObject().position );
					raycaster.ray.origin.y -= 10;
					var intersections = raycaster.intersectObjects( objects );
					var onObject = intersections.length > 0;
					var time = performance.now();
					var delta = ( time - prevTime ) / 1000;
					velocity.x -= velocity.x * 10.0 * delta;
					velocity.z -= velocity.z * 10.0 * delta;
					velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass
					direction.z = Number( moveForward ) - Number( moveBackward );
					direction.x = Number( moveLeft ) - Number( moveRight );
					direction.normalize(); // this ensures consistent movements in all directions
					if ( moveForward || moveBackward ) velocity.z -= direction.z * 1000.0 * delta; //movement speed
					if ( moveLeft || moveRight ) velocity.x -= direction.x * 1000.0 * delta; //movement speed
					if ( onObject === true ) {
						velocity.y = Math.max( 0, velocity.y );
						canJump = true;
					}
					controls.getObject().translateX( velocity.x * delta );
					controls.getObject().translateY( velocity.y * delta );
					controls.getObject().translateZ( velocity.z * delta );
					if ( controls.getObject().position.y < 160 ) {
						velocity.y = 0;
						controls.getObject().position.y = 160; //height of camera
						canJump = true;
					}
					prevTime = time;
				}
				renderer.render( scene, camera );
			}
		</script>
	</body>
</html>